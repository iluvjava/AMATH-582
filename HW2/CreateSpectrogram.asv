function [specMatrix, hzvec, t] = CreateSpectrogram(signal, p)
    % returns a matrix, which is ready to be displayed via pcolor. 
    % Matrix columns are stacked with frequencies vector. 
    % signal: 
    %   A series of floats that we want to view process. 
    % p: 
    %   An instance of the class: SpectroGram, it contains the parameters
    %   we need for the visualization.
    
    tvec = p.Tvec; 
    chunkation = p.N;
    filterWidth = p.Width; 
    freqthreshold = p.FreqCutoff;
    hzvec = p.Hz;
    
    dt = (max(tvec) - min(tvec))/chunkation;
    
    tstart = tvec(1);
    for II = 0: chunkation - 1
        F = GFilter(tstart + II*dt + dt/2, filterWidth*dt, tvec);
        signalFiltered = F.*signal;
        signalFilteredFFTshifted = fftshift(fft(signalFiltered));
        specMatrix(:, II + 1) = signalFilteredFFTshifted;
        t(II + 1) = tstart + II*dt + dt/2;
    end
    specMatrix = abs(specMatrix)/max(abs(specMatrix), [], "all");
    specMatrix = log(specMatrix + 1);
    
    low = freqthreshold(1); high = freqthreshold(2);
        
    indexStart = find(hzvec > low); indexStart = indexStart(1);
    indexEnd = find(hzvec > high); indexEnd = indexEnd(1);
    hzvec = hzvec(indexStart: indexEnd);
    specMatrix = specMatrix(indexStart: indexEnd, :);
    
    p.Spec = specMatrix;
end