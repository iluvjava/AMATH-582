function params = SVMModelMnist(mnistTraining, mnistTesting, params)
    % This function split the trainig of the MNIST data into train and
    % validation set, and then it standardize the data using it to tran a
    % SVM model, and then it predict with the SVM model on all the data
    % set. 
    %   The kernel function is going to be gaussian. 
    % mnistTraing: 
    %   An instance of the MNISTPCA class, has to be training instance 
    % mnistTesting: 
    %   An instance of the MNISTPCA class, has to be a test instance. 
    % ldaParams: 
    %   An instance of the ParameterPack class. 
    
    % Getting the testing data, training data for the MNIST data set. 
    TrainX = mnistTraining.DataStd;
    TrainY = mnistTesting.Labels;
    TestX = mnistTesting.DataStd;
    TestY = mnistTesting.Labels;
    
    % If PCA, then project the data onto the PCA components; 
    if params.PCAOnOff 
        [TrainX, TrainY, Proj] = mnistTraining.principalProj(params.PCAEnergyLevel, Params.SplitByLabels); 
        TestX = Proj*TestX; 
    end
    
    % minmax all features on test and training data. 
    TrainX = MinMaxStd(TrainX); 
    TestX = MinMaxStd(TestX); 
    params.TestX = TestX; 
    params.TestY = TestY;
    
    % Split the training into training and validation set. 
    [X, X1, Y, Y1] = TrainTestSplit(TrainX, TrainY); 
    params.TrainX = X; 
    params.TrainY = Y; 
    params.ValX = X1; 
    params.ValY = Y1; 
    
    % Train the data on the training set: 
    ModelTemplate = templateSVM("KernelFunction", params.KernelFunc);
    SVMModel = fitcecoc(X.', Y, "Learners", ModelTemplate);
    params.TrainedModel = SVMModel;
    
    % predict on the training set 
    TrainPre = predict(SVMModel, X.');
    params.PredictedTrainingLabels = TrainPre; 
    
    % predict on the val set
    ValPre = predict(SVMModel, X1.'); 
    params.PredictedValidateLabels = ValPre; 
    params.CrossValLoss = sum(ValPre ~= reshape(Y1, size(ValPre)))/length(ValPre); 
    
    % Predict on the test set 
    TestPre = predict(SVMModel, TestX.'); 
    params.PredictedTestlabels = TestPre; 
    
end

